/**
完成自动化星辉的分 DEX

待优化
1. 指定一个 DEX 文件中的方法数上限
    - 需要计算 Dex 文件的方法数
    - 需要计算 smali 的方法数
2. 写一个 UI 界面
*/


class SuffixFilter implements FilenameFilter {
    String suffix

    SuffixFilter(String s) {
        suffix = s
    }

    boolean accept(File dir, String name) {
        return name.endsWith(suffix)
    }

}

def moveSmali = { String destDirName, String sourDirName, int count  ->
    def sourceDir = new File(sourDirName)
    /*sourceDir.setReadable(true, true)
    sourceDir.setWritable(true, true)*/

    def destinationDir = new File(destDirName)
    destinationDir.mkdir()

    if(sourceDir.exists()) {
        File[] files = sourceDir.listFiles()
        for (f in files) {
            println f.getName()
        }

        for(int i=0; i<count; i++) {
            String dest = "${destDirName}/${files[i].getName()}"
            println "move ${files[i].absolutePath} to ${dest}"
            files[i].renameTo(new File(dest))
        }

    } else {
        println "sourDir not exist"
    }
}

def getDestDirName(String dexDir) {
    def dexFile = new File(dexDir)
    String[] fs = dexFile.list(new SuffixFilter("dex"));
    return "classes${fs.length + 1}"
}

def splitDex = { String dexDir ->

    println "convert dex to smali"
    ProcessBuilder processBuilder = new ProcessBuilder()
    processBuilder.command("java", "-jar", "D:\\baksmali.jar", "d", "${dexDir}/classes.dex", "-o", "${dexDir}/classes")
    processBuilder.start().waitFor()
    println "split smali"

    def sourDirName = "${dexDir}${File.separator}classes"
    def destDirName = "${dexDir}${File.separator}${getDestDirName(dexDir)}"
    println "move smali, sourDirName: ${sourDirName} , destDirName: ${destDirName}"
    moveSmali.call(destDirName, sourDirName, 4)

    def comDir = "${sourDirName}${File.separator}com"
    def comDestDir = "${destDirName}${File.separator}com"
    println "move smali, sourDirName: ${comDestDir} , destDirName: ${comDir}"
    moveSmali.call(comDestDir, comDir, 7)

    //将 classes.dex 转成 smali 文件
    println "convert ${destDirName} to dex"
    new File("${dexDir}/classes.dex").delete()
    processBuilder.command("java", "-jar", "D:\\smali.jar", "a", "${sourDirName}", "-o", "${dexDir}/classes.dex")
    processBuilder.start().waitFor()

    processBuilder.command("java", "-jar", "D:\\smali.jar", "a", "${destDirName}", "-o", "${destDirName}.dex")
    processBuilder.start().waitFor()
    new File(sourDirName).deleteDir()
    new File(destDirName).deleteDir()
}

afterEvaluate {
    def task = this.getTasks().getByName("mergeDexXinghuiRelease")
    task.doLast {
        println "mergeDex Dir: ${this.buildDir}"
        def dexDirName = "${this.buildDir}${File.separator}intermediates${File.separator}dex${File.separator}xinghuiRelease${File.separator}mergeDexXinghuiRelease"
        def dexDir = new File(dexDirName)
        if (dexDir.exists()) {
            dexDir.eachFile { file ->
                println "${file.name}"
            }
            println "start split dex, dexDirName: ${dexDirName}"
            splitDex.call(dexDirName)
        } else {
            println "could not find dex dir"
        }
    }
}



